const exec = require('child_process').exec;

/*
const gitCliCommits = new gitCommits(commandsRu);
*/



/*
  @description - модуль предназначен для выполнения git комманд связанных с определенными типами
  файлов для бандла документации в формате "*.md" для фиксаций изменений в них при их изменении,при помощи системы
  git
  @param { array } - команды специфичные для конкретного языкового модуля
  @property { string } - команды специфичные для конкретного языкового модуля
  @see gitCommits/commands/{ru.js or en.js or others language}
*/
class gitCommits() {
  constructor(gitCommandsList) {
    this.gitCommandsList = gitCommandsList;
  }
  /*
    @description - выполняет git комманды связанные с документами по "API" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  api() {
    runcmd(gitCommandsList.addApi);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "introduction" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  introduction() {
    runcmd(gitCommandsList.addIntroduction);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "navigation" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  navigation() {
    runcmd(gitCommandsList.addNavigation);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "install" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  install() {
    runcmd(gitCommandsList.addInstall);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "git commands" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  gitCommands() {
    runcmd(gitCommandsList.addCommands);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "cli" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  cli() {
    runcmd(gitCommandsList.addCli);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "cli gulp" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  cliGulp() {
    runcmd(gitCommandsList.addCliGulp);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "releases" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  releases() {
    runcmd(gitCommandsList.addReleases);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "documentation" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  documentation() {
    runcmd(gitCommandsList.addDocumentation);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "troubleshooting" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  troubleshooting() {
    runcmd(gitCommandsList.addTroubleshooting);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "screenshotes" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  screenshotes() {
    runcmd(gitCommandsList.addScreenshotes);
  }
  /*команды специфичные для конкретного языкового модуля
    @description - выполняет git комманды связанные с  документами по "examples" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  examples() {
    runcmd(gitCommandsList.addExamples);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "architecture" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  architecture() {
    runcmd(gitCommandsList.addArchitecture);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "stack" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  stack() {
    runcmd(gitCommandsList.addStack);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "license" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  license() {
    runcmd(gitCommandsList.addLicense);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "team core" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  teamCore() {
    runcmd(gitCommandsList.addTeamCore);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "contribute" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  contribute() {
    runcmd(gitCommandsList.addContribute);
  }
  /*
    @description - выполняет git комманды связанные с  документами по "sponsors" в документации по проекту
    @param { string } - комманды для выполнения в системе
    @returns - выполняет команды определенные в обьекте комманд переданного в данный класс в качестве аргумента
    для данного языкового модуля
  */
  sponsors() {
    runcmd(gitCommandsList.addSponsors);
  }
}


module.exports = gitCommits;
